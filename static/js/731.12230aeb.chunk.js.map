{"version":3,"file":"static/js/731.12230aeb.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactListItem/ContactListItem.jsx","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["export const getContacts = state => state.contacts.entities;\nexport const getFilter = state => state.contacts.filter;\nexport const IsLoading = state => state.contacts.isLoading;\n","import { useState } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\n\nconst ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const numberInputId = nanoid();\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (contacts.find(contact => contact.name.toLowerCase() === name)) {\n      Notiflix.Notify.info(`${name} is already in contacts`);\n      setName('');\n      setNumber('');\n      return;\n    }\n    dispatch(contactsOperations.addContacts({ name, number }));\n    Notiflix.Notify.info('Contact created');\n    setName('');\n    setNumber('');\n  };\n\n  const handleInputChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <div>\n        <label className=\"flex flex-col sm:block mb-3\" htmlFor={nameInputId}>\n          <p className=\"mb-1\">Name</p>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={name}\n            id={nameInputId}\n            onChange={handleInputChange}\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            className=\"form-control block  px-4 py-2 text-xl font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\"\n          />\n        </label>\n        <label className=\"flex flex-col sm:block mb-3\" htmlFor={numberInputId}>\n          <p className=\"mb-1\">Number</p>\n          <input\n            type=\"tel\"\n            name=\"number\"\n            value={number}\n            id={numberInputId}\n            onChange={handleInputChange}\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            className=\"form-control block  px-4 py-2 text-xl font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\"\n          />\n        </label>\n\n        <button\n          className=\" px-6 py-2.5  text-white font-medium text-m leading-tight uppercase rounded  hover:bg-blue-400 hover:shadow-lg focus:bg-blue-400 focus:shadow-lg focus:outline-none focus:ring-0 bg-blue-600  transition duration-150 ease-in-out mt-4\"\n          type=\"submit\"\n        >\n          <span>Add contact</span>\n        </button>\n      </div>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { contactsSelectors } from 'redux/contacts';\nimport { filter } from 'redux/contacts/contactsActions';\nimport PropTypes from 'prop-types';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const value = useSelector(contactsSelectors.getFilter);\n\n  const inputChange = event => {\n    const changeValue = event.target.value;\n    dispatch(filter(changeValue));\n  };\n\n  return (\n    <div>\n      <label className=\"flex flex-col mb-3 sm:block\">\n        <p className=\"mb-1\">Find contacts by name</p>\n        <input\n          className=\"form-control block  px-4 py-2 text-xl font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\"\n          type=\"text\"\n          name=\"number\"\n          value={value}\n          onChange={inputChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  inputChange: PropTypes.func,\n};\n\nexport default Filter;\n","import { contactsOperations } from 'redux/contacts';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { AiOutlineDelete } from 'react-icons/ai';\n\nconst ContactListItem = ({ id, number, name }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <li className=\" list-none flex align-middle py-1\" key={id}>\n      <div>\n        <button\n          type=\"button\"\n          onClick={() => dispatch(contactsOperations.removeContacts(id))}\n          className=\"p-1 bg-red-600 rounded mr-2 \"\n        >\n          <AiOutlineDelete></AiOutlineDelete>\n        </button>\n      </div>\n      {name}: {number}\n    </li>\n  );\n};\n\nContactListItem.protoTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  removeContact: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","import React from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { contactsOperations, contactsSelectors } from 'redux/contacts';\n\nconst ContactList = () => {\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const filter = useSelector(contactsSelectors.getFilter);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(contactsOperations.fetchContacts());\n  }, [dispatch]);\n\n  const getFilteredNames = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  let searchContact = filter === '' ? contacts : getFilteredNames();\n\n  return (\n    <div className=\"py-4\">\n      {searchContact &&\n        searchContact.map(({ id, number, name }) => {\n          return (\n            <ContactListItem key={id} id={id} name={name} number={number} />\n          );\n        })}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div className=\"px-6 py-12 h-full flex justify-center align-middle flex-col\">\n      <Filter />\n      <ContactForm />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["getContacts","state","contacts","entities","getFilter","filter","useState","name","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","nameInputId","nanoid","numberInputId","handleInputChange","event","currentTarget","value","onSubmit","preventDefault","find","contact","toLowerCase","Notiflix","contactsOperations","addContacts","className","htmlFor","type","id","onChange","pattern","title","required","changeValue","target","ContactListItem","onClick","removeContacts","protoTypes","PropTypes","removeContact","useEffect","fetchContacts","searchContact","includes","map"],"sourceRoot":""}